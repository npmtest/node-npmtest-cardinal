{"/home/travis/build/npmtest/node-npmtest-cardinal/test.js":"/* istanbul instrument in package npmtest_cardinal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cardinal/lib.npmtest_cardinal.js":"/* istanbul instrument in package npmtest_cardinal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_cardinal = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_cardinal = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-cardinal/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-cardinal && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_cardinal */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_cardinal\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_cardinal.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_cardinal.rollup.js'] =\n            local.assetsDict['/assets.npmtest_cardinal.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_cardinal.__dirname + '/lib.npmtest_cardinal.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/cardinal.js":"module.exports = {\n    highlight: require('./lib/highlight')\n  , highlightFile: require('./lib/highlightFile')\n  , highlightFileSync: require('./lib/highlightFileSync')\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/lib/highlight.js":"var redeyed =  require('redeyed')\n  , theme   =  require('../themes/default')\n  , colors  =  require('ansicolors')\n\n  , colorSurround =  colors.brightBlack\n  , surroundClose =  '\\u001b[39m'\n  ;\n\nfunction trimEmptyLines(lines) {\n\n  // remove lines from the end until we find a non-empy one\n  var line = lines.pop();\n  while(!line || !line.length)\n    line = lines.pop();\n\n  // put the non-empty line back\n  if (line) lines.push(line);\n}\n\nfunction addLinenos (highlightedCode, firstline) {\n  var highlightedLines = highlightedCode.split('\\n');\n\n  trimEmptyLines(highlightedLines);\n\n  var linesLen = highlightedLines.length\n    , lines = []\n    , totalDigits\n    , lineno\n    ;\n\n  function getDigits (n) {\n    if (n < 10) return 1;\n    if (n < 100) return 2;\n    if (n < 1000) return 3;\n    if (n < 10000) return 4;\n    // this works for up to 99,999 lines - any questions?\n    return 5;\n  }\n\n  function pad (n, totalDigits) {\n    // not pretty, but simple and should perform quite well\n    var padDigits= totalDigits - getDigits(n);\n    switch(padDigits) {\n      case 0: return '' + n;\n      case 1: return ' ' + n;\n      case 2: return '  ' + n;\n      case 3: return '   ' + n;\n      case 4: return '    ' + n;\n      case 5: return '     ' + n;\n    }\n  }\n\n  totalDigits = getDigits(linesLen + firstline - 1);\n\n  for (var i = 0; i < linesLen; i++) {\n    // Don't close the escape sequence here in order to not break multi line code highlights like block comments\n    lineno = colorSurround(pad(i + firstline, totalDigits) + ': ').replace(surroundClose, '');\n    lines.push(lineno + highlightedLines[i]);\n  }\n\n  return lines.join('\\n');\n}\n\nmodule.exports = function highlight (code, opts) {\n  opts = opts || { };\n  try {\n\n    var result = redeyed(code, opts.theme || theme)\n      , firstline = opts.firstline && !isNaN(opts.firstline) ? opts.firstline : 1;\n\n    return opts.linenos ? addLinenos(result.code, firstline) : result.code;\n  } catch (e) {\n    e.message = 'Unable to perform highlight. The code contained syntax errors: ' + e.message;\n    throw e;\n  }\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/themes/default.js":"var colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.brightRed\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.brightBlack\n    , 'self'      :  colors.brightRed\n    , 'console'   :  colors.blue\n    , 'log'       :  colors.blue\n    , 'warn'      :  colors.red\n    , 'error'     :  colors.brightRed\n    , _default    :  colors.white\n    }\n\n  , 'Null': {\n      _default: colors.brightBlack\n    }\n\n  , 'Numeric': {\n      _default: colors.blue\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':')\n          ? colors.green(s)\n          : colors.brightGreen(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  colors.cyan\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  colors.red\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'enum'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  colors.cyan\n    , 'for'         :  undefined\n    , 'function'    :  undefined\n\n    , 'if'          :  undefined\n    , 'implements'  :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  undefined\n    , 'let'         :  undefined\n    , 'new'         :  colors.red\n    , 'package'     :  undefined\n    , 'private'     :  undefined\n    , 'protected'   :  undefined\n    , 'public'      :  undefined\n    , 'return'      :  colors.red\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  colors.brightRed\n    , 'throw'       :  undefined\n    , 'try'         :  colors.cyan\n    , 'typeof'      :  undefined\n\n    , 'var'         :  colors.green\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  colors.brightBlue\n  }\n  , 'Punctuator': {\n      ';': colors.brightBlack\n    , '.': colors.green\n    , ',': colors.green\n\n    , '{': colors.yellow\n    , '}': colors.yellow\n    , '(': colors.brightBlack\n    , ')': colors.brightBlack\n    , '[': colors.yellow\n    , ']': colors.yellow\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': undefined\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': undefined\n    , ':': undefined\n    , '=': undefined\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n\n    , '>>>=': undefined\n\n    , _default: colors.brightYellow\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.brightBlack\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.brightBlack\n    }\n\n  , _default: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/lib/highlightFile.js":"var fs = require('fs')\n  , highlight = require('./highlight');\n\nfunction isFunction (obj) {\n  return toString.call(obj) == '[object Function]';\n}\n\nmodule.exports = function highlightFile (fullPath, opts, cb) {\n  if (isFunction(opts)) { \n    cb = opts;\n    opts = { };\n  }\n  opts = opts || { };\n\n  fs.readFile(fullPath, 'utf-8', function (err, code) {\n    if (err) return cb(err);\n    try {\n      cb(null, highlight(code, opts));\n    } catch (e) {\n      cb(e);\n    }\n  });\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/lib/highlightFileSync.js":"var fs = require('fs')\n  , highlight = require('./highlight');\n\nmodule.exports = function highlightFileSync (fullPath, opts) {\n  var code = fs.readFileSync(fullPath, 'utf-8');\n  opts = opts || { };\n  return highlight(code, opts);\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/settings.js":"var path =  require('path')\n  , util =  require('util')\n  , fs   =  require('fs')\n  , utl  =  require('./utl')\n  , home =  process.env.HOME\n  , settings;\n\nfunction getSettings (home_) {\n  if (settings) return settings;\n  try {\n    settingsJson = fs.readFileSync(path.join(home_ || home, '.cardinalrc'), 'utf-8');\n  } catch (_) {\n    // no .cardinalrc found - not a problem\n    return undefined;\n  }\n  try {\n    return JSON.parse(settingsJson);\n  } catch (e) {\n    // Have a .cardinalrc, but something about it is wrong - warn the user\n    // Coudn't parse the contained JSON\n    console.error(e);\n    return undefined;\n  }\n}\n\n// home_ mainly to be used during tests\n// Resolves the preferred theme from the .cardinalrc found in the HOME directory\n// If it couldn't be resolved, undefined is returned\nfunction resolveTheme (home_) {\n  var themePath\n    , settings = getSettings(home_);\n\n  if (!settings || !settings.theme) return undefined;\n\n  try {\n    // allow specifying just the name of a built-in theme or a full path to a custom theme\n    themePath = utl.isPath(settings.theme) ? settings.theme : path.join(__dirname, 'themes', settings.theme);\n\n    return require(themePath);\n  } catch (e) {\n    // Specified theme path is invalid\n    console.error(e);\n    return undefined;\n  }\n}\n\nmodule.exports = {\n    resolveTheme: resolveTheme\n  , getSettings: getSettings\n};\n\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/utl.js":"var util = require('util');\n\nmodule.exports.isPath = function (s) {\n  return (/[\\/\\\\]/).test(s);\n};\n\nmodule.exports.inspect = function(obj, depth) {\n  console.log(util.inspect(obj, false, depth || 5, true));\n};\n\n\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/bin/cdl.js":"#!/usr/bin/env node\nvar cardinal = require('..')\n  , utl = require('../utl')\n  , settings = require('../settings')\n  , args = process.argv\n  , theme = settings.resolveTheme()\n  , opts = settings.getSettings()\n  , highlighted\n  ;\n\nopts = opts || {};\nopts.theme = theme;\n\nfunction usage() {\n  var msg = [ \n      'Usage: cdl <filename.js> [options]'\n    , ''\n    , 'Options (~/.cardinalrc overrides):'\n    , '  --nonum: turn off line printing'\n    , ''\n    , 'Unix Pipe Example: cat filename.js | grep console | cdl'\n    , ''\n  ].join('\\n');\n  console.log(msg);\n}\n\nfunction highlightFile () {\n  try {\n    highlighted = cardinal.highlightFileSync(args[2], opts);\n    console.log(highlighted);\n  } catch (e) {\n    console.trace();\n    console.error(e);\n  }\n}\n\n// E.g., \"cardinal myfile.js\"\nif (args.length === 3) return highlightFile();\n\nvar opt = args[3];\n\n// E.g., \"cardinal myfile.js --nonum\"\nif (opt && opt.indexOf('--') === 0 ) {\n  if ((/^--(nonum|noline)/i).test(opt)) opts.linenos = false;\n  else { \n    usage();\n    return console.error('Unknown option: ', opt);\n  }\n \n  return highlightFile();\n}\n\n\n// UNIX pipes e.g., \"cat myfile.js | grep console | cardinal\nvar stdin = process.stdin\n  , stdout = process.stdout;\n\n// line numbers don't make sense when we are printing line by line\nopts.linenos = false;\n\nstdin.setEncoding('utf-8');\nstdin.resume();\nstdin\n  .on('data', function (chunk) {\n    chunk.split('\\n').forEach(function (line) {\n      try {\n        stdout.write(cardinal.highlight(line, opts) + '\\n');\n      } catch (e) {\n        // line doesn't represent a valid js snippet and therefore cannot be parsed -> just print as is\n        stdout.write(line + '\\n');\n      }\n    });\n  });\n\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/themes/empty.js":"/*\n * Copy this file and use it as a starting point for your custom cardinal color theme.\n * Just fill in or change the entries for the tokens you want to color\n * Keep in mind that more specific configurations override less specific ones.\n */\n\nvar colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  undefined\n    }\n\n  , 'Identifier': {\n      _default: undefined\n    }\n\n  , 'Null': {\n      _default: undefined\n    }\n\n  , 'Numeric': {\n      _default: undefined\n    }\n\n  , 'String': {\n      _default: undefined\n    }\n\n , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  undefined\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  undefined\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'enum'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  undefined\n    , 'for'         :  undefined\n    , 'function'    :  undefined\n\n    , 'if'          :  undefined\n    , 'implements'  :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  undefined\n    , 'interface'   :  undefined\n    , 'let'         :  undefined\n    , 'new'         :  undefined\n\n    , 'package'     :  undefined\n    , 'private'     :  undefined\n    , 'protected'   :  undefined\n    , 'public'      :  undefined\n\n    , 'return'      :  undefined\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  undefined\n    , 'throw'       :  undefined\n    , 'try'         :  undefined\n    , 'typeof'      :  undefined\n\n    , 'var'         :  undefined\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  undefined\n  }\n  , 'Punctuator': {\n      ';': undefined\n    , '.': undefined\n    , ',': undefined\n\n    , '{': undefined\n    , '}': undefined\n    , '(': undefined\n    , ')': undefined\n    , '[': undefined\n    , ']': undefined\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': undefined\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': undefined\n    , ':': undefined\n    , '=': undefined\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n\n    , '>>>=': undefined\n\n    , _default: undefined\n  }\n\n    // line comment\n  , Line: {\n     _default: undefined\n    }\n\n    /* block comment */\n  , Block: {\n     _default: undefined\n    }\n\n  , _default: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/themes/hide-semicolons.js":"var colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.brightRed\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.brightBlack\n    , 'self'      :  colors.brightRed\n    , 'console'   :  colors.blue\n    , 'log'       :  colors.blue\n    , 'warn'      :  colors.red\n    , 'error'     :  colors.brightRed\n    , _default    :  colors.white\n    }\n\n  , 'Null': {\n      _default: colors.brightBlack\n    }\n\n  , 'Numeric': {\n      _default: colors.blue\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':')\n          ? colors.green(s)\n          : colors.brightGreen(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  colors.cyan\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  colors.red\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'enum'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  colors.cyan\n    , 'for'         :  undefined\n    , 'function'    :  undefined\n\n    , 'if'          :  undefined\n    , 'implements'  :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  undefined\n    , 'let'         :  undefined\n    , 'new'         :  colors.red\n    , 'package'     :  undefined\n    , 'private'     :  undefined\n    , 'protected'   :  undefined\n    , 'public'      :  undefined\n    , 'return'      :  colors.red\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  colors.brightRed\n    , 'throw'       :  undefined\n    , 'try'         :  colors.cyan\n    , 'typeof'      :  undefined\n\n    , 'var'         :  colors.green\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  colors.brightBlue\n  }\n  , 'Punctuator': {\n      // setting semicolon's color to the same as the terminal background makes it invisible\n      ';': colors.black\n\n    , '.': colors.green\n    , ',': colors.green\n\n    , '{': colors.yellow\n    , '}': colors.yellow\n    , '(': colors.brightBlack\n    , ')': colors.brightBlack\n    , '[': colors.yellow\n    , ']': colors.yellow\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': undefined\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': undefined\n    , ':': undefined\n    , '=': undefined\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n\n    , '>>>=': undefined\n\n    , _default: colors.brightYellow\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.brightBlack\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.brightBlack\n    }\n\n  , _default: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/themes/jq.js":"var colors = require('ansicolors');\n\n// mimics [jq](https://stedolan.github.io/jq/) highlighting for json files\n// mainly in the fact that the keys are a clearly different color than the strings\n// However improvements to this theme are highly welcome! :)\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.brightRed\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.brightBlack\n    , 'self'      :  colors.brightRed\n    , 'console'   :  colors.blue\n    , 'log'       :  colors.blue\n    , 'warn'      :  colors.red\n    , 'error'     :  colors.brightRed\n    , _default    :  colors.white\n    }\n\n  , 'Null': {\n      _default: colors.brightBlack\n    }\n\n  , 'Numeric': {\n      _default: colors.blue\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':')\n          ? colors.brightBlue(s)\n          : colors.brightGreen(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  undefined\n\n    , 'case'        :  undefined\n    , 'catch'       :  colors.cyan\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  undefined\n\n    , 'debugger'    :  undefined\n    , 'default'     :  undefined\n    , 'delete'      :  colors.red\n    , 'do'          :  undefined\n\n    , 'else'        :  undefined\n    , 'enum'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  colors.cyan\n    , 'for'         :  undefined\n    , 'function'    :  undefined\n\n    , 'if'          :  undefined\n    , 'implements'  :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  undefined\n    , 'instanceof'  :  undefined\n    , 'let'         :  undefined\n    , 'new'         :  colors.red\n    , 'package'     :  undefined\n    , 'private'     :  undefined\n    , 'protected'   :  undefined\n    , 'public'      :  undefined\n    , 'return'      :  colors.red\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  undefined\n\n    , 'this'        :  colors.brightRed\n    , 'throw'       :  undefined\n    , 'try'         :  colors.cyan\n    , 'typeof'      :  undefined\n\n    , 'var'         :  colors.green\n    , 'void'        :  undefined\n\n    , 'while'       :  undefined\n    , 'with'        :  undefined\n    , 'yield'       :  undefined\n    , _default      :  colors.brightBlue\n  }\n  , 'Punctuator': {\n      ';': colors.brightBlack\n    , '.': colors.green\n    , ',': colors.green\n\n    , '{': colors.brightWhite\n    , '}': colors.brightWhite\n    , '(': colors.brightBlack\n    , ')': colors.brightBlack\n    , '[': colors.brightWhite\n    , ']': colors.brightWhite\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': undefined\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': undefined\n    , ':': undefined\n    , '=': undefined\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n\n    , '>>>=': undefined\n\n    , _default: colors.brightYellow\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.brightBlack\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.brightBlack\n    }\n\n  , _default: undefined\n};\n","/home/travis/build/npmtest/node-npmtest-cardinal/node_modules/cardinal/themes/tomorrow-night.js":"var colors = require('ansicolors');\n\n// Change the below definitions in order to tweak the color theme.\nmodule.exports = {\n\n    'Boolean': {\n      'true'   :  undefined\n    , 'false'  :  undefined\n    , _default :  colors.yellow\n    }\n\n  , 'Identifier': {\n      'undefined' :  colors.yellow\n    , 'self'      :  colors.yellow\n    , 'type'      :  colors.yellow\n    , 'value'     :  colors.yellow\n    , 'console'   :  undefined\n    , 'log'       :  colors.blue\n    , 'warn'      :  colors.blue\n    , 'error'     :  colors.blue\n    , 'join'      :  colors.blue\n    , _default    :  function (s, info) {\n        var prevToken = info.tokens[info.tokenIndex - 1];\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        return (nextToken\n            && nextToken.type === 'Punctuator'\n            && nextToken.value === '('\n            && prevToken\n            && prevToken.type === 'Keyword'\n            && prevToken.value === 'function'\n          ) ? colors.blue(s) : colors.white(s);\n      }\n    }\n\n  , 'Null': {\n      _default: colors.yellow\n    }\n\n  , 'Numeric': {\n      _default: colors.yellow\n    }\n\n  , 'String': {\n      _default: function (s, info) {\n        var nextToken = info.tokens[info.tokenIndex + 1];\n\n        // show keys of object literals and json in different color\n        return (nextToken && nextToken.type === 'Punctuator' && nextToken.value === ':')\n          ? colors.green(s)\n          : colors.brightGreen(s);\n      }\n    }\n\n  , 'Keyword': {\n      'break'       :  colors.magenta\n\n    , 'case'        :  colors.magenta\n    , 'catch'       :  colors.magenta\n    , 'class'       :  undefined\n    , 'const'       :  undefined\n    , 'continue'    :  colors.magenta\n\n    , 'debugger'    :  colors.magenta\n    , 'default'     :  colors.magenta\n    , 'delete'      :  colors.red\n    , 'do'          :  colors.magenta\n\n    , 'else'        :  colors.magenta\n    , 'enum'        :  undefined\n    , 'export'      :  undefined\n    , 'extends'     :  undefined\n\n    , 'finally'     :  colors.magenta\n    , 'for'         :  colors.magenta\n    , 'function'    :  colors.magenta\n\n    , 'if'          :  colors.magenta\n    , 'implements'  :  undefined\n    , 'import'      :  undefined\n    , 'in'          :  colors.cyan\n    , 'instanceof'  :  colors.cyan\n    , 'let'         :  undefined\n    , 'new'         :  colors.cyan\n    , 'package'     :  undefined\n    , 'private'     :  undefined\n    , 'protected'   :  undefined\n    , 'public'      :  undefined\n    , 'return'      :  colors.magenta\n    , 'static'      :  undefined\n    , 'super'       :  undefined\n    , 'switch'      :  colors.magenta\n\n    , 'this'        :  colors.red\n    , 'throw'       :  colors.magenta\n    , 'try'         :  colors.magenta\n    , 'typeof'      :  colors.cyan\n\n    , 'var'         :  colors.magenta\n    , 'void'        :  colors.magenta\n\n    , 'while'       :  colors.magenta\n    , 'with'        :  colors.cyan\n    , 'yield'       :  undefined\n    , _default      :  colors.white\n  }\n  , 'Punctuator': {\n      ';': colors.white\n    , '.': colors.white\n    , ',': colors.white\n\n    , '{': colors.white\n    , '}': colors.white\n    , '(': colors.white\n    , ')': colors.white\n    , '[': colors.white\n    , ']': colors.white\n\n    , '<': undefined\n    , '>': undefined\n    , '+': undefined\n    , '-': undefined\n    , '*': undefined\n    , '%': undefined\n    , '&': undefined\n    , '|': colors.white\n    , '^': undefined\n    , '!': undefined\n    , '~': undefined\n    , '?': colors.white\n    , ':': colors.white\n    , '=': undefined\n\n    , '<=': undefined\n    , '>=': undefined\n    , '==': undefined\n    , '!=': undefined\n    , '++': undefined\n    , '--': undefined\n    , '<<': undefined\n    , '>>': undefined\n    , '&&': undefined\n    , '||': undefined\n    , '+=': undefined\n    , '-=': undefined\n    , '*=': undefined\n    , '%=': undefined\n    , '&=': undefined\n    , '|=': undefined\n    , '^=': undefined\n    , '/=': undefined\n    , '=>': undefined\n\n    , '===': undefined\n    , '!==': undefined\n    , '>>>': undefined\n    , '<<=': undefined\n    , '>>=': undefined\n    , '...': undefined\n\n    , '>>>=': undefined\n\n    , _default: colors.cyan\n  }\n\n    // line comment\n  , Line: {\n     _default: colors.brightBlack\n    }\n\n    /* block comment */\n  , Block: {\n     _default: colors.brightBlack\n    }\n\n  , _default: undefined\n};\n"}